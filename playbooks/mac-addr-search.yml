---
# As a Preface, this task would be a bit more convenient in python, honestly this is more of an example or something to use to tie into other bits to achieve a desired result
- name: MAC Address Lookup 
  hosts: "{{ selected_devices }}"
  gather_facts: false
  vars:
    mac_addr: []
  vars_files:
   - ../inventory/secrets/admin.yml
   - ../inventory/secrets/systems.yml

  tasks:
    - name: Setting Initial Facts set full MAC addresses to use Cisco Formatting
      ansible.builtin.set_fact:
        macaddress_list: "{{ macaddress.replace(' ','').split(',') }}"

    - name: Setting Initial Facts set full MAC addresses to use Cisco Formatting
      ansible.builtin.set_fact:
        mac_addr: "{{ mac_addr + [ item|ansible.netcommon.hwaddr('cisco') ] }}"
      when:
      - item | ansible.netcommon.hwaddr
      - item | length>=12
      loop: "{{ macaddress_list }}" 

    - name: Setting Initial Facts, mid size partial MACs need to contain a period that hopefully they'll be properly formatted
      ansible.builtin.set_fact:
        mac_addr: "{{ mac_addr + [ item ] }}"
      when:
      - item | length<12
      - item | length>4
      - item.find(':') == -1
      - item.find('-') == -1
      - item.find('.') != -1
      loop: "{{ macaddress_list  }}" 

    - name: Setting Initial Facts, small partial MACs need to contain no punctuation characters so that hopefully they'll be properly formatted
      ansible.builtin.set_fact:
        mac_addr: "{{ mac_addr + [ item ] }}"
      when:
      - item | length<4
      - item.find(':') == -1
      - item.find('-') == -1
      - item.find('.') == -1
      loop: "{{ macaddress_list  }}" 

    - name: Gather and Parse MAC Addresses in the MAC Address Table
      ansible.netcommon.cli_parse:
        command: "show mac address-table dynamic | i Mac|-{% for item in mac_addr %}| {{ item.lower() }}{% endfor %}"
        parser:
          name: ansible.netcommon.textfsm
          template_path: "{{playbook_dir}}/ntc_templates/cisco_ios_show_mac-address-table_old.textfsm"
        set_fact: mac_table

    - name: Generate List of Destination Ports
      ansible.builtin.set_fact:
        dport_list: "{{ mac_table | to_json | from_json | json_query(dport_lister) }}"
      vars:
        dport_lister: "[*].destination_port"

    - name: Pull switchport interface info for the port the MAC address is on
      ansible.netcommon.cli_parse:
        command: "show interfaces {{ item }} switchport"
        parser:
          name: ansible.netcommon.ntc_templates
          command: show interfaces switchport
      register: switchport_info
      loop: "{{ dport_list }}"

    - name: Seperate Parsed Information into List of relevant dictionaries
      ansible.builtin.set_fact:
        parsed_swp_info: "{{ parsed_swp_info|default([]) +  item.0.parsed }}"
      loop: "{{ switchport_info.results|subelements('parsed') }}"

    - name: Generate List of Dicts from the past two CLI parsings
      ansible.builtin.set_fact:
        swp_info_mac_table: "{{ swp_info_mac_table|default([])  + [ item.0 | combine(item.1) ] }}"
      loop: "{{ parsed_swp_info|zip(mac_table)|list }}"

    - name: Pull General Interface Info
      ansible.netcommon.cli_parse:
        command: "show interfaces {{ item }}"
        parser:
          name: ansible.netcommon.ntc_templates
          command: show interfaces
      register: port_info
      loop: "{{ dport_list }}"

    - name: Seperate Parsed Information into List of relevant dictionaries
      ansible.builtin.set_fact:
        parsed_port_info: "{{ parsed_port_info|default([]) +  item.0.parsed }}"
      loop: "{{ port_info.results|subelements('parsed') }}"

    - name: Generate List of Dicts from the past three CLI parsings
      ansible.builtin.set_fact:
        full_info: "{{ full_info|default([])  + [ item.0 | combine(item.1) ] }}"
      loop: "{{ parsed_port_info|zip(swp_info_mac_table)|list }}"

#I'd do this a "right way", but any way I've found usually is either janky, or well doesn't work. 
#https://github.com/ansible/ansible/issues/68364
#Thankfully the coreutils exist as well as templating features

    - name: create html_tables 
      ansible.builtin.template:
        src: '{{playbook_dir}}/../templates/mac-addr-search-mail-bodies.j2'
        dest: '/tmp/{{inventory_hostname}}-mail-bodies.html'
        mode: 0666
      delegate_to: localhost

    - name: create_headers 
      ansible.builtin.template:
        src: '{{playbook_dir}}/../templates/mac-addr-search-mail-headers.j2'
        dest: '/tmp/mail-html-headers.html'
        mode: 0666
      delegate_to: localhost
      run_once: true

    - name: Concatenate All Mail HTML's
      ansible.builtin.shell: cat /tmp/mail-html-headers.html /tmp/*-mail-bodies.html >> /tmp/combinedmail.html
      delegate_to: localhost
      run_once: true

    - name: Remove Old Mail HTML's
      ansible.builtin.shell: rm /tmp/*-mail-*.html 
      delegate_to: localhost
      run_once: true

    - name: Mail Alerts
      community.general.mail:
        host: "{{ mail_srv }}"
        port: 587
        username: "{{ alerts_mail_acct }}"
        password: "{{ alerts_mail_pw }}"
        to: "{{ to_address }}" 
        from: "{{ alerts_mail_acct }}"
        subject: MAC Address Locations with Information
        subtype: html
        body: "{{ lookup('file', '/tmp/combinedmail.html') }}"
      delegate_to: localhost
      run_once: true
      when:
      - to_address is defined
      - cc_recipients is undefined

    - name: Mail Alerts
      community.general.mail:
        host: "{{ mail_srv }}"
        port: 587
        username: "{{ alerts_mail_acct }}"
        password: "{{ alerts_mail_pw }}"
        to: "{{ to_address }}" 
        cc: "{{ cc_recipients }}"
        from: "{{ alerts_mail_acct }}"
        subject: MAC Address Locations with Information
        subtype: html
        body: "{{ lookup('file', '/tmp/combinedmail.html') }}"
      delegate_to: localhost
      run_once: true
      when:
      - to_address is defined
      - cc_recipients is defined

    - name: Send Interface Information
      community.general.discord: 
          webhook_id: "{{ discord_webhook_id }}"
          webhook_token: "{{ discord_webhook_token }}"
          embeds:
            - title: "{{ inventory_hostname }}"
              fields: 
                - name: "MAC Address"
                  value: "{{ item.destination_address }}"
                  inline: true
                - name: "Port"
                  value: "{{ item.destination_port }}"
                  inline: true
                - name: "VLAN"
                  value: "{{ item.vlan }}"
                  inline: true
                - name: "Port Mode"
                  value: "{{ item.mode }}"
                  inline: true
                - name: "Interface Description"
                  value: "{% if item.description %}{{ item.description }}{% else %}N/A{% endif %}"
                  inline: true
      loop: "{{ full_info }}"

    - name: Concatenate All Mail HTML's
      ansible.builtin.shell: rm /tmp/combinedmail.html
      delegate_to: localhost
      run_once: true

